<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.song.demo.mapper.HouseMapper">
    <!-- Manager Side Query -->
    <select id="getHouse" resultType="com.song.demo.vo.HouseVo">
        select
            h.*,
            u.username as agent_name,
            u.phone as agent_phone,
            CASE
                WHEN EXISTS (
                    SELECT 1
                    FROM likes k
                    WHERE h.house_id = k.house_id and k.user_id = #{query.userId}
                ) THEN 1 ELSE 0
            END AS is_liked
        from houses h
            left join users u on h.agent = u.user_id
        <where>
            h.audit_status = 'APPROVED'
            <if test="query.status != null and query.status != ''">
                and h.status = #{query.status}
            </if>
            <if test="query.layout != null and query.layout != ''">
                and h.layout = #{query.layout}
            </if>
            <if test="query.city != null and query.city != ''">
                and h.city = #{query.city}
            </if>
            <if test="query.community != null and query.community != ''">
                and h.community like concat('%', #{query.community}, '%')
            </if>
            <if test="query.name != null and query.name != ''">
                and h.name like concat('%', #{query.name}, '%')
            </if>
            <if test="query.phone != null and query.phone != ''">
                and h.phone = #{query.phone}
            </if>
            <if test="query.intention != null">
                and h.intention = #{query.intention}
            </if>
        </where>
        group by h.house_id
        order by h.create_time desc
    </select>

    <!-- Manager Side Query -->
    <select id="getAuditHouse" resultType="com.song.demo.vo.HouseVo">
        select
            h.*,
            u.username as agent_name,
            u.phone as agent_phone,
            CASE
                WHEN EXISTS (
                    SELECT 1
                    FROM likes k
                    WHERE h.house_id = k.house_id and k.user_id = #{query.userId}
                ) THEN 1 ELSE 0
            END AS is_liked
        from houses h
            left join users u on h.agent = u.user_id
        <where>
            <if test="query.status != null and query.status != ''">
                and h.audit_status = #{query.status}
            </if>
            <if test="query.layout != null and query.layout != ''">
                and h.layout = #{query.layout}
            </if>
            <if test="query.city != null and query.city != ''">
                and h.city = #{query.city}
            </if>
            <if test="query.community != null and query.community != ''">
                and h.community like concat('%', #{query.community}, '%')
            </if>
            <if test="query.name != null and query.name != ''">
                and h.name like concat('%', #{query.name}, '%')
            </if>
            <if test="query.phone != null and query.phone != ''">
                and h.phone = #{query.phone}
            </if>
            <if test="query.intention != null">
                and h.intention = #{query.intention}
            </if>
        </where>
        group by h.house_id
        order by h.create_time desc
    </select>

    <!-- Client Side Query -->
    <select id="queryHouse" resultType="com.song.demo.vo.HouseVo">
        select
            h.*,
            u.username as agent_name,
            u.phone as agent_phone,
            hi.image_url as image_cover,
            CASE
                WHEN EXISTS (
                    SELECT 1
                    FROM likes k
                    WHERE h.house_id = k.house_id and k.user_id = #{query.userId}
                ) THEN 1 ELSE 0
            END AS is_liked
        from houses h
            left join users u on h.agent = u.user_id
            left join house_images hi on h.house_id = hi.house_id and hi.is_cover = 1
        <where>
            (h.status = 'PUBLISHED'
            <if test="query.showFinish != null and query.showFinish">
                or h.status = 'FINISHED'
            </if>)
            <if test="query.keyword != null and query.keyword != ''">
                and (h.community like concat('%', #{query.keyword}, '%')
                    or h.address like concat('%', #{query.keyword}, '%')
                    or h.title like concat('%', #{query.keyword}, '%'))
            </if>
            <!-- 动态字段过滤（支持eq/min/max混合） -->
            <if test="query.filter != null">
                <foreach collection="query.filter" item="filterItem">
                    <!-- 动态字段名白名单校验 -->
                    <if test="filterItem.code == 'layout' or filterItem.code == 'unit_price' or filterItem.code == 'expect_price' or filterItem.code == 'area'">
                        <foreach collection="filterItem.checked" item="rule" open="AND (" close=")" separator=" OR ">
                            <choose>
                                <!-- 精确匹配 -->
                                <when test="rule != null and rule.eql != null">
                                    h.${filterItem.code} = #{rule.eql}
                                </when>
                                <!-- 范围匹配 -->
                                <when test="rule != null and rule.min != null and rule.max == null">
                                    h.${filterItem.code} >= #{rule.min}
                                </when>
                                <when test="rule != null and rule.max != null and rule.min == null">
                                    #{rule.max} >= h.${filterItem.code}
                                </when>
                                <when test="rule != null and rule.min != null and rule.max != null">
                                    (h.${filterItem.code} >= #{rule.min} and #{rule.max} >= h.${filterItem.code})
                                </when>
                            </choose>
                        </foreach>
                    </if>
                </foreach>
            </if>
        </where>
        <!-- 排序规则 -->
        <choose>
            <when test="query.sortType == 'expect_price' or query.sortType == 'create_time' or query.sortType == 'area'">
                ORDER BY h.${query.sortType}
            </when>
            <otherwise>ORDER BY h.create_time DESC</otherwise>
        </choose>
        <!-- 升序/降序 -->
        <choose>
            <when test="query.sortDir != null and query.sortDir == 'asc'">
                ASC
            </when>
            <otherwise>DESC</otherwise>
        </choose>
    </select>

    <select id="queryMyHouse" resultType="com.song.demo.vo.HouseVo">
        select
            h.*,
            u.username as agent_name,
            u.phone as agent_phone,
            hi.image_url as image_cover,
            CASE
                WHEN EXISTS (
                    SELECT 1
                    FROM likes k
                    WHERE h.house_id = k.house_id and k.user_id = #{userId}
                ) THEN 1 ELSE 0
            END AS is_liked
        from houses h
            left join users u on h.agent = u.user_id
            left join house_images hi on h.house_id = hi.house_id and hi.is_cover = 1
        where h.user_id = #{userId}
        ORDER BY h.create_time DESC
    </select>

    <select id="queryMyLikeHouse" resultType="com.song.demo.vo.HouseVo">
        select
            h.*,
            u.username as agent_name,
            u.phone as agent_phone,
            hi.image_url as image_cover,
            CASE
                WHEN EXISTS (
                    SELECT 1
                    FROM likes k
                    WHERE h.house_id = k.house_id and k.user_id = #{userId}
                ) THEN 1 ELSE 0
            END AS is_liked
        from houses h
            left join users u on h.agent = u.user_id
            left join house_images hi on h.house_id = hi.house_id and hi.is_cover = 1
            join likes lk on lk.house_id = h.house_id
        where lk.user_id = #{userId}
        ORDER BY lk.create_time DESC
    </select>

    <select id="getMyAppointments" resultType="com.song.demo.vo.AppointmentVo">
        select
            ap.*
        from appointments ap
            left join houses h on h.house_id = ap.house_id
        where ap.user_id = #{userId}
        ORDER BY ap.create_time DESC
    </select>

    <!-- Query House Detail -->
    <select id="getHouseById" resultType="com.song.demo.vo.HouseVo">
        select
            h.*,
            u.username as agent_name,
            u.phone as agent_phone,
            ap.id as appoint_id,
            ap.start_time as appoint_start_time,
            ap.end_time as appoint_end_time
        from houses h
            left join users u on h.agent = u.user_id
            left join appointments ap on h.house_id = ap.house_id
                                         and (#{userId} IS NULL OR (ap.user_id = #{userId} and ap.status in ('PENDING', 'CONFIRMED')))
        where h.house_id = #{id}
    </select>

    <select id="queryHotHouse" resultType="com.song.demo.vo.HouseVo">
        SELECT
            h.*,
            u.username AS agent_name,
            u.phone AS agent_phone,
            hi.image_url AS image_cover,
            (COALESCE(l.like_count, 0) * 0.6 + COALESCE(c.comment_count, 0) * 0.4) AS popularity_score
        FROM houses h
            LEFT JOIN users u ON h.agent = u.user_id
            LEFT JOIN house_images hi ON h.house_id = hi.house_id AND hi.is_cover = 1
            LEFT JOIN (
                SELECT house_id, COUNT(*) AS like_count
                FROM likes
                GROUP BY house_id
            ) l ON h.house_id = l.house_id
            LEFT JOIN (
                SELECT house_id, COUNT(*) AS comment_count
                FROM comments
                GROUP BY house_id
            ) c ON h.house_id = c.house_id
        WHERE l.like_count > 0 OR c.comment_count > 0
        ORDER BY popularity_score DESC
            LIMIT 8
    </select>

<!--    CASE-->
<!--    WHEN #{userId} IS NOT NULL AND EXISTS (-->
<!--    SELECT 1-->
<!--    FROM appointments ap-->
<!--    WHERE h.house_id = ap.house_id and ap.user_id = #{userId} and ap.status not in ('PENDING', 'CONFIRMED')-->
<!--    ) THEN 1 ELSE 0-->
<!--    END AS is_appointed-->
</mapper>
